Index: /madwifi/trunk/net80211/_ieee80211.h
===================================================================
--- /madwifi/trunk/net80211/_ieee80211.h (revision 2513)
+++ /madwifi/trunk/net80211/_ieee80211.h (revision 2736)
@@ -226,4 +226,6 @@
 #define	IEEE80211_RATE_SIZE	8		/* 802.11 standard */
 #define	IEEE80211_RATE_MAXSIZE	15		/* max rates we'll handle */
+#define	IEEE80211_SANITISE_RATESIZE(_rsz) \
+	((_rsz > IEEE80211_RATE_MAXSIZE) ? IEEE80211_RATE_MAXSIZE : _rsz)
 
 struct ieee80211_rateset {
Index: /madwifi/trunk/net80211/ieee80211_scan_sta.c
===================================================================
--- /madwifi/trunk/net80211/ieee80211_scan_sta.c (revision 2648)
+++ /madwifi/trunk/net80211/ieee80211_scan_sta.c (revision 2736)
@@ -248,20 +248,21 @@
 	TAILQ_INSERT_TAIL(&st->st_entry, se, se_list);
 	LIST_INSERT_HEAD(&st->st_hash[hash], se, se_hash);
+
 found:
 	ise = &se->base;
+
 	/* XXX ap beaconing multiple ssid w/ same bssid */
 	if (sp->ssid[1] != 0 &&
 	    (ISPROBE(subtype) || ise->se_ssid[1] == 0))
 		memcpy(ise->se_ssid, sp->ssid, 2 + sp->ssid[1]);
-	KASSERT(sp->rates[1] <= IEEE80211_RATE_MAXSIZE,
-		("rate set too large: %u", sp->rates[1]));
-	memcpy(ise->se_rates, sp->rates, 2 + sp->rates[1]);
+
+	memcpy(ise->se_rates, sp->rates, 
+			2 + IEEE80211_SANITISE_RATESIZE(sp->rates[1]));
 	if (sp->xrates != NULL) {
-		/* XXX validate xrates[1] */
-		KASSERT(sp->xrates[1] <= IEEE80211_RATE_MAXSIZE,
-			("xrate set too large: %u", sp->xrates[1]));
-		memcpy(ise->se_xrates, sp->xrates, 2 + sp->xrates[1]);
+		memcpy(ise->se_xrates, sp->xrates, 
+				2 + IEEE80211_SANITISE_RATESIZE(sp->xrates[1]));
 	} else
 		ise->se_xrates[1] = 0;
+
 	IEEE80211_ADDR_COPY(ise->se_bssid, wh->i_addr3);
 	/*
Index: /madwifi/trunk/net80211/ieee80211_scan_ap.c
===================================================================
--- /madwifi/trunk/net80211/ieee80211_scan_ap.c (revision 2731)
+++ /madwifi/trunk/net80211/ieee80211_scan_ap.c (revision 2736)
@@ -512,29 +512,28 @@
 	TAILQ_INSERT_TAIL(&as->as_entry, se, se_list);
 	LIST_INSERT_HEAD(&as->as_hash[hash], se, se_hash);
+
 found:
 	ise = &se->base;
-	/* XXX ap beaconing multiple ssid w/ same bssid */
-	if (sp->ssid[1] != 0 &&
-	    ((subtype == IEEE80211_FC0_SUBTYPE_PROBE_RESP) || ise->se_ssid[1] == 0))
-	{
+
+	/* XXX: AP beaconing multiple SSID w/ same BSSID */
+	if ((sp->ssid[1] != 0) &&
+	    ((subtype == IEEE80211_FC0_SUBTYPE_PROBE_RESP) || 
+	     (ise->se_ssid[1] == 0)))
 		memcpy(ise->se_ssid, sp->ssid, 2 + sp->ssid[1]);
-        }
-	KASSERT(sp->rates[1] <= IEEE80211_RATE_MAXSIZE,
-		("rate set too large: %u", sp->rates[1]));
-	memcpy(ise->se_rates, sp->rates, 2 + sp->rates[1]);
+
+	memcpy(ise->se_rates, sp->rates, 
+		IEEE80211_SANITISE_RATESIZE(2 + sp->rates[1]));
 	if (sp->xrates != NULL) {
-		/* XXX validate xrates[1] */
-		KASSERT(sp->xrates[1] <= IEEE80211_RATE_MAXSIZE,
-			("xrate set too large: %u", sp->xrates[1]));
-		memcpy(ise->se_xrates, sp->xrates, 2 + sp->xrates[1]);
+		memcpy(ise->se_xrates, sp->xrates, 
+				IEEE80211_SANITISE_RATESIZE(2 + sp->xrates[1]));
 	} else
 		ise->se_xrates[1] = 0;
+
 	IEEE80211_ADDR_COPY(ise->se_bssid, wh->i_addr3);
-	/*
-	 * Record rssi data using extended precision LPF filter.
-	 */
-	if (se->se_lastupdate == 0)		/* first sample */
+
+	/* Record RSSI data using extended precision LPF filter.*/
+	if (se->se_lastupdate == 0)			/* First sample */
 		se->se_avgrssi = RSSI_IN(rssi);
-	else					/* avg w/ previous samples */
+	else					/* Avg. w/ previous samples */
 		RSSI_LPF(se->se_avgrssi, rssi);
 	se->base.se_rssi = RSSI_GET(se->se_avgrssi);
