diff -urN -x 'config.*' -x '*~' -x DEBIAN -x debian -x Makefile -x version.c tcpdump-3.9.8/ahcp.h tcpdump-3.9.8j/ahcp.h
--- tcpdump-3.9.8/ahcp.h	1970-01-01 01:00:00.000000000 +0100
+++ tcpdump-3.9.8j/ahcp.h	2007-10-09 20:29:46.000000000 +0200
@@ -0,0 +1,54 @@
+/*
+Copyright (c) 2006-2007 by Juliusz Chroboczek
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
+*/
+
+#define OPT_PAD 0
+#define OPT_MANDATORY 1
+#define OPT_EXPIRES 2
+#define OPT_IPv6_PREFIX 3
+#define OPT_ROUTING_PROTOCOL 4
+#define OPT_NAME_SERVER 5
+#define OPT_NTP_SERVER 6
+
+#define ROUTING_PROTOCOL_STATIC 0
+#define ROUTING_PROTOCOL_OLSR 1
+#define ROUTING_PROTOCOL_BABEL 2
+
+/* STATIC options */
+#define STATIC_DEFAULT_GATEWAY 2
+
+/* OLSR options */
+#define OLSR_MULTICAST_ADDRESS 2
+#define OLSR_HELLO_INTERVAL 3
+#define OLSR_HELLO_VALIDITY 4
+#define OLSR_TC_INTERVAL 5
+#define OLSR_TC_VALIDITY 6
+#define OLSR_MID_INTERVAL 7
+#define OLSR_MID_VALIDITY 8
+#define OLSR_HNA_INTERVAL 9
+#define OLSR_HNA_VALIDITY 10
+#define OLSR_LINK_QUALITY 11
+
+/* Babel options */
+
+#define BABEL_MULTICAST_ADDRESS 2
+#define BABEL_PORT_NUMBER 3
+#define BABEL_HELLO_INTERVAL 4
diff -urN -x 'config.*' -x '*~' -x DEBIAN -x debian -x Makefile -x version.c tcpdump-3.9.8/interface.h tcpdump-3.9.8j/interface.h
--- tcpdump-3.9.8/interface.h	2007-06-14 03:03:20.000000000 +0200
+++ tcpdump-3.9.8j/interface.h	2007-10-09 20:29:46.000000000 +0200
@@ -325,6 +325,8 @@
 extern int rt6_print(const u_char *, const u_char *);
 extern void ospf6_print(const u_char *, u_int);
 extern void dhcp6_print(const u_char *, u_int);
+extern void ahcp_print(const u_char *, u_int);
+extern void babel_print(const u_char *, u_int);
 #endif /*INET6*/
 extern u_short in_cksum(const u_short *, register u_int, int);
 extern u_int16_t in_cksum_shouldbe(u_int16_t, u_int16_t);
diff -urN -x 'config.*' -x '*~' -x DEBIAN -x debian -x Makefile -x version.c tcpdump-3.9.8/Makefile.in tcpdump-3.9.8j/Makefile.in
--- tcpdump-3.9.8/Makefile.in	2007-09-26 03:59:52.000000000 +0200
+++ tcpdump-3.9.8j/Makefile.in	2007-10-09 20:30:51.000000000 +0200
@@ -67,9 +67,9 @@
 
 CSRC =	addrtoname.c af.c cpack.c gmpls.c oui.c gmt2local.c ipproto.c \
         nlpid.c l2vpn.c machdep.c parsenfsfh.c \
-	print-802_11.c print-ap1394.c print-ah.c print-arcnet.c \
+	print-802_11.c print-ap1394.c print-ah.c print-ahcp.c print-arcnet.c \
 	print-aodv.c print-arp.c print-ascii.c print-atalk.c print-atm.c \
-	print-beep.c print-bfd.c print-bgp.c print-bootp.c print-cdp.c \
+	print-babel.c print-beep.c print-bfd.c print-bgp.c print-bootp.c print-cdp.c \
 	print-chdlc.c print-cip.c print-cnfp.c print-dccp.c print-decnet.c \
 	print-domain.c print-dvmrp.c print-enc.c print-egp.c \
 	print-eap.c print-eigrp.c\
diff -urN -x 'config.*' -x '*~' -x DEBIAN -x debian -x Makefile -x version.c tcpdump-3.9.8/print-ahcp.c tcpdump-3.9.8j/print-ahcp.c
--- tcpdump-3.9.8/print-ahcp.c	1970-01-01 01:00:00.000000000 +0100
+++ tcpdump-3.9.8j/print-ahcp.c	2007-10-09 21:51:19.000000000 +0200
@@ -0,0 +1,275 @@
+/*
+ * Copyright (c) 2007
+ *   Grégoire Henry <henry@pps.jussieu.fr>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the project nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include <tcpdump-stdinc.h>
+
+#include <stdio.h>
+#include <string.h>
+
+#include <arpa/inet.h>
+
+#include "addrtoname.h"
+#include "interface.h"
+#include "ahcp.h"
+
+static void ahcp_print_v1(const u_char *cp, u_int length);
+static void ahcp_print_v1_reply(const u_char *cp, u_int length);
+
+static void print_address_list(const u_char *cp, u_int length);
+static void print_static_option(const u_char *cp, u_int length);
+static void print_olsr_option(const u_char *cp, u_int length);
+static void print_babel_option(const u_char *cp, u_int length);
+
+void
+ahcp_print(const u_char *cp, u_int length) {
+
+  printf("ahcp");
+
+  if (cp + 4 > snapend)
+    return;
+
+  if (cp[0] != 43) {
+    printf(" Malformed header.");
+    return;
+  }
+
+  switch (cp[1]) {
+  case 0:
+      ahcp_print_v1(cp, length);
+      break;
+  default:
+      printf(" Unknown protocol version (%d).", cp[1]);
+  }
+}
+
+
+void
+ahcp_print_v1(const u_char *cp, u_int length) {
+
+  switch (cp[2]) {
+  case 0:
+      printf(" query");
+      break;
+  case 1:
+      printf(" reply");
+      if(vflag)
+          ahcp_print_v1_reply(cp,length);
+      break;
+  default:
+      printf(" Unknown opcode (%d).", cp[2]);
+  }
+
+}
+
+void
+ahcp_print_v1_reply(const u_char *cp, u_int length) {
+
+    char origin_s[26], expires_s[26];
+    time_t origin, expires;
+    unsigned short age, len, olen;
+    const u_char *body, *message;
+    int i;
+    char *mandatory;
+
+    if (cp + 20 > snapend)
+        return;
+
+    origin = ntohl(*((uint32_t *) (cp + 4)));
+    expires = ntohl(*((uint32_t *) (cp + 8)));
+    age = ntohs(*((uint16_t *) (cp + 16)));
+    len = ntohs(*((uint16_t *) (cp + 18)));
+    body = cp + 20;
+
+    ctime_r(&origin, origin_s);
+    origin_s[24] = 0;
+    printf(" origin \"%s\"", origin_s);
+
+    ctime_r(&expires, expires_s);
+    expires_s[24] = 0;
+    printf(" expires \"%s\"", expires_s);
+
+    printf(" age %d", age);
+
+    message = body;
+    i = 0;
+
+    while(message < body + len) {
+        if (message + 1 > snapend || message + 1 > body + len)
+            break;
+        if (message[0] == OPT_PAD) {
+            mandatory = "";
+            message++;
+            continue;
+        } else if (message[0] == OPT_MANDATORY) {
+            mandatory = " (Mandatory)";
+            message++;
+            continue;
+        }
+
+        if (message + 2 > snapend || message + 2 > body + len)
+            break;
+        olen = message[1];
+        if (message + olen > snapend)
+            break;
+        if (message[0] == OPT_EXPIRES) {
+            if (vflag >= 3 && olen != 4) {
+                fprintf(stderr, "Truncated message.\n");
+                return;
+            }
+            expires = ntohl(*((uint32_t *) (message + 2)));
+            ctime_r(&expires, expires_s);
+            expires_s[24] = 0;
+            printf("\n\t%d: expires \"%s\"%s", i, expires_s, mandatory);
+
+        } else if (message[0] == OPT_IPv6_PREFIX ||
+                   message[0] == OPT_NAME_SERVER ||
+                   message[0] == OPT_NTP_SERVER) {
+            char *name;
+            if (message[0] == OPT_IPv6_PREFIX) 
+                name = "ipv6 prefix";
+            else if (message[0] == OPT_NAME_SERVER)
+                name = "name server";
+            else
+                name = "ntp server";
+            printf("\n\t%d: %s%s", i, name, mandatory);
+            if(olen % 16 != 0) {
+                fprintf(stderr, "Unexpected length.\n");
+                return;
+            }
+            if (message + 2 + olen > snapend || 
+                message + 2 + olen > body + len)
+                break;
+            print_address_list(message + 2, olen);
+
+        } else if (message[0] == OPT_ROUTING_PROTOCOL) {
+            if (olen < 1) {
+                fprintf(stderr, "Unexpected size for routing protocol.\n");
+                return;
+            }
+            if (message + 3 > snapend || 
+                message + 3 > body + len)
+                break;
+            if (message + 2 + olen > body + len)
+                break;
+            if (message[2] == ROUTING_PROTOCOL_STATIC) {
+                printf("\n\t%d: Static%s", i, mandatory);
+                if(vflag >= 2) print_static_option(message + 3, olen - 1);
+            } else if (message[2] == ROUTING_PROTOCOL_OLSR) {
+                printf("\n\t%d: OLSR%s", i, mandatory);
+                if(vflag >= 2) print_olsr_option(message + 3, olen - 1);
+            } else if(message[2] == ROUTING_PROTOCOL_BABEL) {
+                printf("\n\t%d: Babel%s", i, mandatory);
+                if (vflag >= 2) print_babel_option(message + 3, olen - 1);
+            } else {
+                printf("\n\t%d: Unknown routing protocol (%d)%s",
+                       i, message[2], mandatory);
+            }
+
+        } else {
+            printf("\n\t%d: Unknown option (code: %d, len: %d)%s",
+                   i, message[0], olen, mandatory);
+
+        }
+        mandatory = "";
+        message += olen + 2;
+        i++;
+    }
+
+    if (message < snapend) printf("\n\t...");
+
+}
+
+static void print_address_list(const u_char *cp, u_int length) {
+    const unsigned char *address;
+    for(address = cp; address < cp + length; address += 16)
+        printf(" %s", ip6addr_string(address));
+}
+
+static void print_static_option(const u_char *cp, u_int length) {
+
+}
+static void print_olsr_option(const u_char *cp, u_int length) {
+
+}
+static void print_babel_option(const u_char *cp, u_int length) {
+    const u_char * message;
+    char *mandatory = "";
+
+    int olen, i;
+
+    message = cp;
+    i = 0;
+    while (message < cp + length) {
+
+        if (message + 1 > snapend)
+            break;
+        if (message[0] == OPT_PAD) {
+            mandatory = "";
+            message++;
+            continue;
+        } else if (message[0] == OPT_MANDATORY) {
+            mandatory = " (Mandatory)";
+            message++;
+            continue;
+        }
+
+        if (message + 2 > snapend)
+            break;
+        olen = message[1];
+        if (message + olen > snapend)
+            break;
+        if (message[0] == BABEL_MULTICAST_ADDRESS) {
+            printf("\n\t\t %d: multicast address %s%s",
+                   i, ip6addr_string(message + 2), mandatory);
+
+        } else if (message[0] == BABEL_PORT_NUMBER) {
+            printf("\n\t\t %d: port number %hu%s",
+                   i, ntohs(*((uint16_t *) (message + 2))), mandatory);
+
+        } else if (message[0] == BABEL_HELLO_INTERVAL) {
+            printf("\n\t\t %d: hello interval %hu%s",
+                   i, ntohs(*((uint16_t *) (message + 2))), mandatory);
+
+        } else {
+            printf("\n\t\t%d: Unknown babel option (%d)%s",
+                   i, message[0], mandatory);
+        }
+
+        mandatory = "";
+        message += olen + 2;
+        i++;
+    }
+
+    if (message < cp + length) printf("\n\t...");
+
+}
diff -urN -x 'config.*' -x '*~' -x DEBIAN -x debian -x Makefile -x version.c tcpdump-3.9.8/print-babel.c tcpdump-3.9.8j/print-babel.c
--- tcpdump-3.9.8/print-babel.c	1970-01-01 01:00:00.000000000 +0100
+++ tcpdump-3.9.8j/print-babel.c	2007-10-09 20:29:46.000000000 +0200
@@ -0,0 +1,178 @@
+/*
+ * Copyright (c) 2007
+ *   Grégoire Henry <henry@pps.jussieu.fr>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the project nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include <tcpdump-stdinc.h>
+
+#include <stdio.h>
+#include <string.h>
+
+#include "addrtoname.h"
+#include "interface.h"
+
+static void babel_print_v1(const u_char *cp, u_int length);
+
+void
+babel_print(const u_char *cp, u_int length) {
+
+  printf("babel");
+
+  if(cp + 4 > snapend)
+    return;
+
+  if(cp[0] != 42 || cp[2] != 0 || cp[3] != 0) {
+    printf(" Malformed header");
+    return;
+  }
+
+  switch(cp[1]) {
+  case 1:
+      babel_print_v1(cp,length);
+      break;
+  default:
+      printf(" Unknown protocol version (%d)", cp[1]);
+  }
+
+}
+
+static void
+babel_print_v1(const u_char *cp, u_int length) {
+
+    int i;
+    const u_char *message;
+    int messages;
+
+    if (length % 24 != 8)
+        printf(" (Warning: unexpected length %d)", length);
+
+    messages = (length - 8) / 24;
+    printf(" (%d)", messages);
+
+    for(message = cp + 8, i = 0; i < messages; message += 24, i++) {
+        unsigned char type, plen, hopcount;
+        unsigned short seqno;
+        unsigned short metric;
+        const unsigned char *address;
+
+        if (message + 24 > snapend)
+            break;
+
+        type = message[0];
+        plen = message[1];
+        hopcount = message[3];
+        seqno = ntohs(*(uint16_t*)(message + 4));
+        metric = ntohs(*(uint16_t*)(message + 6));
+        address = message + 8;
+
+        switch(type) {
+
+        case 0: { /* Hello */
+            if(!vflag)
+                printf(" hello");
+            else
+                printf("\n\t%d: Hello from %s seqno %hu interval %hu ",
+                       i, ip6addr_string(address)), seqno, metric;
+            break;
+        }
+
+        case 1: { /* IHU */
+            if(!vflag)
+                printf(" ihu");
+            else if(metric == 0xFFFF)
+                printf("\n\t%d: IHU interval %hu cost INFINITY id %s",
+                       i, seqno, ip6addr_string(address));
+            else
+                printf("\n\t%d: IHU interval %hu cost %hu id %s",
+                       i, seqno, metric, ip6addr_string(address));
+            break;
+        }
+
+        case 2: { /* Request */
+            if (!vflag)
+                printf(" request");
+            else if (plen == 0xFF)
+                printf("\n\t%d: Request full dump", i);
+            else if (hopcount == 0)
+                printf("\n\t%d: Request %s/%hhu",
+                       i, ip6addr_string(address), plen);
+            else
+                printf("\n\t%d: Request %s/%hhu hopcount %hhu seqno %hu hash %hu",
+                       i, ip6addr_string(address), plen,
+                       hopcount, seqno, metric);
+            break;
+        }
+
+        case 3: { /* Update */
+            if (!vflag && plen == 0xFF)
+                printf(" update");
+            else if (!vflag)
+                printf(" update/prefix");
+            else if (plen == 0xFF)
+                printf("\n\t%d: Update %s", i, ip6addr_string(address));
+            else if (metric == 0xFFFF)
+                printf("\n\t%d: Update/Prefix %s/%hhu seqno %hu metric INFINTY",
+                       i, ip6addr_string(address), plen, seqno);
+            else
+                printf("\n\t%d: Update/Prefix %s/%hhu seqno %hu metric %hu",
+                       i, ip6addr_string(address), plen, seqno, metric);
+            break;
+        }
+
+        case 4: { /* Prefix information */
+            if (!vflag)
+                printf(" prefix");
+            else if (metric == 0xFFFF)
+                printf("\n\t%d: Prefix %s/%hhu seqno %hu metric INFINITY", i,
+                       ip6addr_string(address), plen, seqno);
+            else
+                printf("\n\t%d: Prefix %s/%hhu seqno %hu metric %hu", i,
+                       ip6addr_string(address), plen, seqno, metric);
+            break;
+        }
+
+        default:
+            if(!vflag)
+                printf(" unknown");
+            else
+                printf("\n\t%d: Unknown message type (%d)", i, type);
+        }
+
+    }
+
+    if(i != messages) {
+        if(!vflag)
+            printf(" ...");
+        else
+            printf("\n\t... %d message(s) more", messages - i);
+    }
+
+}
diff -urN -x 'config.*' -x '*~' -x DEBIAN -x debian -x Makefile -x version.c tcpdump-3.9.8/print-udp.c tcpdump-3.9.8j/print-udp.c
--- tcpdump-3.9.8/print-udp.c	2007-06-14 03:03:21.000000000 +0200
+++ tcpdump-3.9.8j/print-udp.c	2007-10-09 20:29:46.000000000 +0200
@@ -655,6 +655,10 @@
 		else if (ISPORT(DHCP6_SERV_PORT) || ISPORT(DHCP6_CLI_PORT)) {
 			dhcp6_print((const u_char *)(up + 1), length);
 		}
+		else if (ISPORT(AHCP_PORT))
+			ahcp_print((const u_char *)(up + 1), length);
+		else if (ISPORT(BABEL_PORT))
+			babel_print((const u_char *)(up + 1), length);
 #endif /*INET6*/
 		/*
 		 * Kludge in test for whiteboard packets.
diff -urN -x 'config.*' -x '*~' -x DEBIAN -x debian -x Makefile -x version.c tcpdump-3.9.8/udp.h tcpdump-3.9.8j/udp.h
--- tcpdump-3.9.8/udp.h	2007-06-14 03:03:21.000000000 +0200
+++ tcpdump-3.9.8j/udp.h	2007-10-09 21:51:19.000000000 +0200
@@ -86,4 +86,6 @@
 #define RIPNG_PORT 521		/*XXX*/
 #define DHCP6_SERV_PORT 546	/*XXX*/
 #define DHCP6_CLI_PORT 547	/*XXX*/
+#define BABEL_PORT 8475
+#define AHCP_PORT 5359
 #endif
