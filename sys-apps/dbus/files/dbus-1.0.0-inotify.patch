--- dbus-1.0.0/bus/Makefile.am.inotify	2006-10-01 17:36:18.000000000 +0200
+++ dbus-1.0.0/bus/Makefile.am	2006-11-22 14:32:44.000000000 +0100
@@ -26,12 +26,16 @@
 if DBUS_BUS_ENABLE_KQUEUE
 DIR_WATCH_SOURCE=dir-watch-kqueue.c
 else
+if DBUS_BUS_ENABLE_INOTIFY
+DIR_WATCH_SOURCE=dir-watch-inotify.c
+else
 if DBUS_BUS_ENABLE_DNOTIFY_ON_LINUX
 DIR_WATCH_SOURCE=dir-watch-dnotify.c
 else
 DIR_WATCH_SOURCE=dir-watch-default.c
 endif
 endif
+endif
 
 BUS_SOURCES=					\
 	activation.c				\
--- dbus-1.0.0/bus/dir-watch-inotify.c.inotify	2006-11-22 14:32:44.000000000 +0100
+++ dbus-1.0.0/bus/dir-watch-inotify.c	2006-11-22 14:46:29.000000000 +0100
@@ -0,0 +1,155 @@
+/* -*- mode: C; c-file-style: "gnu" -*- */
+/* dir-watch-inotify.c  OS specific directory change notification for message bus
+ *
+ * Copyright (C) 2003 Red Hat, Inc.
+ *           (c) 2006 Mandriva
+ *
+ * Licensed under the Academic Free License version 2.1
+ * 
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+
+#include <config.h>
+
+#define _GNU_SOURCE
+#include <stdlib.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <sys/inotify.h>
+#include <sys/types.h>
+#include <signal.h>
+
+#include <dbus/dbus-internals.h>
+#include <dbus/dbus-watch.h>
+#include "dir-watch.h"
+
+#define MAX_DIRS_TO_WATCH 128
+
+/* use a static array to avoid handling OOM */
+static int wds[MAX_DIRS_TO_WATCH];
+static int num_wds = 0;
+static int inotify_fd = -1;
+static DBusWatch *watch = NULL;
+static DBusLoop *loop = NULL;
+
+static dbus_bool_t
+_inotify_watch_callback (DBusWatch *watch, unsigned int condition, void *data)
+{
+  return dbus_watch_handle (watch, condition);
+}
+
+static dbus_bool_t
+_handle_inotify_watch (DBusWatch *watch, unsigned int flags, void *data)
+{
+  struct inotify_event ev;
+  size_t res;
+  pid_t pid;
+
+  res = read (inotify_fd, &ev, sizeof(ev));
+
+  if (res > 0)
+    {
+      pid = getpid ();
+      _dbus_verbose ("Sending SIGHUP signal on reception of a inotify event\n");
+      (void) kill (pid, SIGHUP);
+    }
+  else if (res < 0 && errno == EBADF)
+    {
+      if (watch != NULL)
+	{
+	  _dbus_loop_remove_watch (loop, watch, _inotify_watch_callback, NULL);
+          _dbus_watch_unref (watch);
+	  watch = NULL;
+	}
+      pid = getpid ();
+      _dbus_verbose ("Sending SIGHUP signal since inotify fd has been closed\n");
+      (void) kill (pid, SIGHUP);
+    }
+
+  return TRUE;
+}
+void
+bus_watch_directory (const char *dir, BusContext *context)
+{
+  int wd;
+
+  _dbus_assert (dir != NULL);
+
+  if (inotify_fd == -1) {
+     inotify_fd = inotify_init ();
+     if (inotify_fd <= 0) {
+      _dbus_warn ("Cannot initialize inotify\n");
+      goto out;
+     } 
+     loop = bus_context_get_loop (context);
+
+     watch = _dbus_watch_new (inotify_fd, DBUS_WATCH_READABLE, TRUE,
+                              _handle_inotify_watch, NULL, NULL);
+
+	if (watch == NULL)
+          {
+            _dbus_warn ("Unable to create inotify watch\n");
+	    goto out;
+	  }
+
+	if (!_dbus_loop_add_watch (loop, watch, _inotify_watch_callback,
+                                   NULL, NULL))
+          {
+            _dbus_warn ("Unable to add reload watch to main loop");
+	    _dbus_watch_unref (watch);
+	    watch = NULL;
+            goto out;
+	  }
+  }
+
+
+  if (num_wds >= MAX_DIRS_TO_WATCH )
+    {
+      _dbus_warn ("Cannot watch config directory '%s'. Already watching %d directories\n", dir, MAX_DIRS_TO_WATCH);
+      goto out;
+    }
+
+  wd = inotify_add_watch (inotify_fd, dir, IN_MODIFY);
+  if (wd < 0)
+    {
+      _dbus_warn ("Cannot setup inotify for '%s'; error '%s'\n", dir, _dbus_strerror (errno));
+      goto out;
+    }
+
+  wds[num_wds++] = wd;
+  _dbus_verbose ("Added watch on config directory '%s'\n", dir);
+
+ out:
+  ;
+}
+
+void 
+bus_drop_all_directory_watches (void)
+{
+  int i;
+ 
+  _dbus_verbose ("Dropping all watches on config directories\n");
+ 
+  for (i = 0; i < num_wds; i++)
+    {
+      if (inotify_rm_watch(inotify_fd, wds[i]) != 0)
+	{
+	  _dbus_verbose ("Error closing fd %d for config directory watch\n", wds[i]);
+	}
+    }
+  
+  num_wds = 0;
+}
--- dbus-1.0.0/configure.in.inotify	2006-11-09 00:29:03.000000000 +0100
+++ dbus-1.0.0/configure.in	2006-11-22 14:32:44.000000000 +0100
@@ -57,6 +57,7 @@
 AC_ARG_ENABLE(abstract-sockets, AS_HELP_STRING([--enable-abstract-sockets],[use abstract socket namespace (linux only)]),enable_abstract_sockets=$enableval,enable_abstract_sockets=auto)
 AC_ARG_ENABLE(selinux, AS_HELP_STRING([--enable-selinux],[build with SELinux support]),enable_selinux=$enableval,enable_selinux=auto)
 AC_ARG_ENABLE(dnotify, AS_HELP_STRING([--enable-dnotify],[build with dnotify support (linux only)]),enable_dnotify=$enableval,enable_dnotify=auto)
+AC_ARG_ENABLE(inotify, AS_HELP_STRING([--enable-inotify],[build with inotify support (linux only)]),enable_inotify=$enableval,enable_inotify=auto)
 AC_ARG_ENABLE(kqueue, AS_HELP_STRING([--enable-kqueue],[build with kqueue support]),enable_kqueue=$enableval,enable_kqueue=auto)
 AC_ARG_ENABLE(console-owner-file, AS_HELP_STRING([--enable-console-owner-file],[enable console owner file]),enable_console_owner_file=$enableval,enable_console_owner_file=auto)
 
@@ -842,11 +843,25 @@
     SELINUX_LIBS=
 fi
 
+# inotify checks
+if test x$enable_inotify = xno ; then
+    have_inotify=no;
+else
+    AC_CHECK_HEADERS(sys/inotify.h, have_inotify=no, have_inotify=yes)
+fi
+
+dnl check if inotify backend is enabled
+if test x$have_inotify = xyes; then
+   AC_DEFINE(DBUS_BUS_ENABLE_INOTIFY,1,[Use inotify])
+fi
+
+AM_CONDITIONAL(DBUS_BUS_ENABLE_INOTIFY, test x$have_inotify = xyes)
+
 # dnotify checks
 if test x$enable_dnotify = xno ; then
     have_dnotify=no;
 else
-    if test x$target_os = xlinux-gnu -o x$target_os = xlinux; then
+    if test x$target_os = xlinux-gnu -o x$target_os = xlinux -a x$have_inotify = xno; then
         have_dnotify=yes;	
     else
         have_dnotify=no;
