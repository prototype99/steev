Index: configure.in
===================================================================
RCS file: /cvs/dbus/dbus/configure.in,v
retrieving revision 1.216
diff -u -p -r1.216 configure.in
--- configure.in	27 Jul 2007 21:01:22 -0000	1.216
+++ configure.in	3 Aug 2007 18:59:29 -0000
@@ -1,7 +1,12 @@
 dnl -*- mode: m4 -*-
 AC_PREREQ(2.52)
 
-AC_INIT(dbus, 1.1.2)
+m4_define([dbus_major_version], [1])
+m4_define([dbus_minor_version], [1])
+m4_define([dbus_micro_version], [2])
+m4_define([dbus_version],
+          [dbus_major_version.dbus_minor_version.dbus_micro_version])
+AC_INIT(dbus, [dbus_version])
 
 AC_CANONICAL_TARGET
 
@@ -39,6 +44,15 @@ AC_SUBST(LT_CURRENT)
 AC_SUBST(LT_REVISION)
 AC_SUBST(LT_AGE)
 
+DBUS_MAJOR_VERSION=dbus_major_version
+DBUS_MINOR_VERSION=dbus_minor_version
+DBUS_MICRO_VERSION=dbus_micro_version
+DBUS_VERSION=dbus_major_version.dbus_minor_version.dbus_micro_version
+
+AC_SUBST(DBUS_MAJOR_VERSION)
+AC_SUBST(DBUS_MINOR_VERSION)
+AC_SUBST(DBUS_MICRO_VERSION)
+AC_SUBST(DBUS_VERSION)
 
 AC_PROG_CC
 AM_PROG_CC_C_O
Index: dbus/dbus-arch-deps.h.in
===================================================================
RCS file: /cvs/dbus/dbus/dbus/dbus-arch-deps.h.in,v
retrieving revision 1.4
diff -u -p -r1.4 dbus-arch-deps.h.in
--- dbus/dbus-arch-deps.h.in	12 Jun 2006 09:20:20 -0000	1.4
+++ dbus/dbus-arch-deps.h.in	3 Aug 2007 18:59:29 -0000
@@ -51,6 +51,17 @@ typedef unsigned @DBUS_INT32_TYPE@ dbus_
 typedef @DBUS_INT16_TYPE@ dbus_int16_t;
 typedef unsigned @DBUS_INT16_TYPE@ dbus_uint16_t;
 
+/* This is not really arch-dependent, but it's not worth
+ * creating an additional generated header just for this
+ */
+#define DBUS_MAJOR_VERSION @DBUS_MAJOR_VERSION@
+#define DBUS_MINOR_VERSION @DBUS_MINOR_VERSION@
+#define DBUS_MICRO_VERSION @DBUS_MICRO_VERSION@
+
+#define DBUS_VERSION_STRING "@DBUS_VERSION@"
+
+#define DBUS_VERSION ((@DBUS_MAJOR_VERSION@ << 16) | (@DBUS_MINOR_VERSION@ << 8) | (@DBUS_MICRO_VERSION@)) 
+
 DBUS_END_DECLS
 
 #endif /* DBUS_ARCH_DEPS_H */
Index: dbus/dbus-misc.c
===================================================================
RCS file: /cvs/dbus/dbus/dbus/dbus-misc.c,v
retrieving revision 1.3
diff -u -p -r1.3 dbus-misc.c
--- dbus/dbus-misc.c	14 Jul 2007 02:43:58 -0000	1.3
+++ dbus/dbus-misc.c	3 Aug 2007 18:59:29 -0000
@@ -91,6 +91,83 @@ dbus_get_local_machine_id (void)
 
 }
 
+/**
+ * @def DBUS_MAJOR_VERSION
+ *
+ * The COMPILE TIME major version of libdbus, that is, the "X" in "X.Y.Z",
+ * as an integer literal. Consider carefully whether to use this or the
+ * runtime version from dbus_get_version().
+ */
+
+/**
+ * @def DBUS_MINOR_VERSION
+ *
+ * The COMPILE TIME minor version of libdbus, that is, the "Y" in "X.Y.Z",
+ * as an integer literal. Consider carefully whether to use this or the
+ * runtime version from dbus_get_version().
+ */
+
+/**
+ * @def DBUS_MICRO_VERSION
+ *
+ * The COMPILE TIME micro version of libdbus, that is, the "Z" in "X.Y.Z",
+ * as an integer literal. Consider carefully whether to use this or the
+ * runtime version from dbus_get_version().
+ */
+
+/**
+ * @def DBUS_VERSION
+ *
+ * The COMPILE TIME version of libdbus, as a single integer that has 0 in the most
+ * significant byte, the major version in the next most significant byte,
+ * the minor version in the third most significant, and the micro version in the
+ * least significant byte. This means two DBUS_VERSION can be compared to see
+ * which is higher.
+ *
+ * Consider carefully whether to use this or the runtime version from
+ * dbus_get_version().
+ */
+
+/**
+ * @def DBUS_VERSION_STRING
+ *
+ * The COMPILE TIME version of libdbus, as a string "X.Y.Z".
+ *
+ * Consider carefully whether to use this or the runtime version from
+ * dbus_get_version().
+ */
+
+/**
+ * Gets the DYNAMICALLY LINKED version of libdbus. Alternatively, there
+ * are macros #DBUS_MAJOR_VERSION, #DBUS_MINOR_VERSION, #DBUS_MICRO_VERSION,
+ * and #DBUS_VERSION which allow you to test the VERSION YOU ARE COMPILED AGAINST.
+ * In other words, you can get either the runtime or the compile-time version.
+ * Think carefully about which of these you want in a given case.
+ *
+ * The libdbus full version number is "MAJOR.MINOR.MICRO" where the
+ * MINOR changes if API is added, and the MICRO changes with each
+ * release of a MAJOR.MINOR series.  The MINOR is an odd number for
+ * development releases and an even number for stable releases.
+ * 
+ * @param major_version_p pointer to return the major version, or #NULL
+ * @param minor_version_p pointer to return the minor version, or #NULL
+ * @param micro_version_p pointer to return the micro version, or #NULL 
+ * 
+ */
+void
+dbus_get_version (int *major_version_p,
+                  int *minor_version_p,
+                  int *micro_version_p)
+{
+  if (major_version_p)
+    *major_version_p = DBUS_MAJOR_VERSION;
+  if (minor_version_p)
+    *minor_version_p = DBUS_MINOR_VERSION;
+  if (micro_version_p)
+    *micro_version_p = DBUS_MICRO_VERSION;
+}
+
+
 /** @} */ /* End of public API */
 
 #ifdef DBUS_BUILD_TESTS
@@ -104,7 +181,62 @@ dbus_get_local_machine_id (void)
 dbus_bool_t
 _dbus_misc_test (void)
 {
+  int major, minor, micro;
+  DBusString str;
+
+  /* make sure we don't crash on NULL */
+  dbus_get_version (NULL, NULL, NULL);
+
+  /* Now verify that all the compile-time version stuff
+   * is right and matches the runtime. These tests
+   * are mostly intended to catch various kinds of
+   * typo (mixing up major and minor, that sort of thing).
+   */
+  dbus_get_version (&major, &minor, &micro);
+
+  _dbus_assert (major == DBUS_MAJOR_VERSION);
+  _dbus_assert (minor == DBUS_MINOR_VERSION);
+  _dbus_assert (micro == DBUS_MICRO_VERSION);
+
+#define MAKE_VERSION(x, y, z) (((x) << 16) | ((y) << 8) | (z))
+
+  /* check that MAKE_VERSION works and produces the intended ordering */
+  _dbus_assert (MAKE_VERSION (1, 0, 0) > MAKE_VERSION (0, 0, 0));
+  _dbus_assert (MAKE_VERSION (1, 1, 0) > MAKE_VERSION (1, 0, 0));
+  _dbus_assert (MAKE_VERSION (1, 1, 1) > MAKE_VERSION (1, 1, 0));
+
+  _dbus_assert (MAKE_VERSION (2, 0, 0) > MAKE_VERSION (1, 1, 1));
+  _dbus_assert (MAKE_VERSION (2, 1, 0) > MAKE_VERSION (1, 1, 1));
+  _dbus_assert (MAKE_VERSION (2, 1, 1) > MAKE_VERSION (1, 1, 1));
+
+  /* check DBUS_VERSION */
+  _dbus_assert (MAKE_VERSION (major, minor, micro) == DBUS_VERSION);
+
+  /* check that ordering works with DBUS_VERSION */
+  _dbus_assert (MAKE_VERSION (major - 1, minor, micro) < DBUS_VERSION);
+  _dbus_assert (MAKE_VERSION (major, minor - 1, micro) < DBUS_VERSION);
+  _dbus_assert (MAKE_VERSION (major, minor, micro - 1) < DBUS_VERSION);
   
+  _dbus_assert (MAKE_VERSION (major + 1, minor, micro) > DBUS_VERSION);
+  _dbus_assert (MAKE_VERSION (major, minor + 1, micro) > DBUS_VERSION);
+  _dbus_assert (MAKE_VERSION (major, minor, micro + 1) > DBUS_VERSION);
+
+  /* Check DBUS_VERSION_STRING */
+
+  if (!_dbus_string_init (&str))
+    _dbus_assert_not_reached ("no memory");
+
+  if (!(_dbus_string_append_int (&str, major) &&
+        _dbus_string_append_byte (&str, '.') &&
+        _dbus_string_append_int (&str, minor) &&
+        _dbus_string_append_byte (&str, '.') &&
+        _dbus_string_append_int (&str, micro)))
+    _dbus_assert_not_reached ("no memory");
+
+  _dbus_assert (_dbus_string_equal_c_str (&str, DBUS_VERSION_STRING));
+
+  _dbus_string_free (&str);
+   
   return TRUE;
 }
 
Index: dbus/dbus-misc.h
===================================================================
RCS file: /cvs/dbus/dbus/dbus/dbus-misc.h,v
retrieving revision 1.3
diff -u -p -r1.3 dbus-misc.h
--- dbus/dbus-misc.h	14 Jul 2007 02:43:58 -0000	1.3
+++ dbus/dbus-misc.h	3 Aug 2007 18:59:29 -0000
@@ -37,7 +37,11 @@ DBUS_BEGIN_DECLS
  * @{
  */
 
-char*       dbus_get_local_machine_id              (void);
+char*       dbus_get_local_machine_id  (void);
+
+void        dbus_get_version           (int *major_version_p,
+                                        int *minor_version_p,
+                                        int *micro_version_p);
 
 /** @} */
 
